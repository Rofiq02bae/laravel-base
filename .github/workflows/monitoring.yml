name: 🔍 Health Check & Monitoring

on:
  schedule:
    # Run every 15 minutes
    - cron: '*/15 * * * *'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to check'
        required: true
        default: 'production'
        type: choice
        options:
        - staging
        - production

jobs:
  health-check:
    runs-on: ubuntu-latest
    name: 🔍 Health Check
    
    steps:
    - name: 📂 Checkout code
      uses: actions/checkout@v4

    - name: 🔍 Check Application Health
      id: health
      run: |
        # Define endpoints based on environment
        if [ "${{ github.event.inputs.environment || 'production' }}" == "production" ]; then
          BASE_URL="${{ secrets.PROD_BASE_URL || 'https://your-domain.com' }}"
        else
          BASE_URL="${{ secrets.STAGING_BASE_URL || 'https://staging.your-domain.com' }}"
        fi
        
        echo "base_url=$BASE_URL" >> $GITHUB_OUTPUT
        
        # Check main endpoint
        echo "🔍 Checking: $BASE_URL"
        response=$(curl -s -o /dev/null -w "%{http_code}" "$BASE_URL" || echo "000")
        echo "main_status=$response" >> $GITHUB_OUTPUT
        
        # Check health endpoint
        echo "🔍 Checking: $BASE_URL/health"
        health_response=$(curl -s -o /dev/null -w "%{http_code}" "$BASE_URL/health" || echo "000")
        echo "health_status=$health_response" >> $GITHUB_OUTPUT
        
        # Check API endpoint
        echo "🔍 Checking: $BASE_URL/api/health"
        api_response=$(curl -s -o /dev/null -w "%{http_code}" "$BASE_URL/api/health" || echo "000")
        echo "api_status=$api_response" >> $GITHUB_OUTPUT

    - name: 📊 Generate Health Report
      run: |
        echo "## 🔍 Health Check Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Environment:** ${{ github.event.inputs.environment || 'production' }}" >> $GITHUB_STEP_SUMMARY
        echo "**Timestamp:** $(date -u)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Endpoint | Status | Result |" >> $GITHUB_STEP_SUMMARY
        echo "|----------|--------|--------|" >> $GITHUB_STEP_SUMMARY
        
        # Main endpoint
        if [ "${{ steps.health.outputs.main_status }}" == "200" ]; then
          echo "| Main App | ${{ steps.health.outputs.main_status }} | ✅ Healthy |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| Main App | ${{ steps.health.outputs.main_status }} | ❌ Unhealthy |" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Health endpoint
        if [ "${{ steps.health.outputs.health_status }}" == "200" ]; then
          echo "| Health Check | ${{ steps.health.outputs.health_status }} | ✅ Healthy |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| Health Check | ${{ steps.health.outputs.health_status }} | ❌ Unhealthy |" >> $GITHUB_STEP_SUMMARY
        fi
        
        # API endpoint
        if [ "${{ steps.health.outputs.api_status }}" == "200" ]; then
          echo "| API | ${{ steps.health.outputs.api_status }} | ✅ Healthy |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| API | ${{ steps.health.outputs.api_status }} | ❌ Unhealthy |" >> $GITHUB_STEP_SUMMARY
        fi

    - name: 🚨 Alert on Failure
      if: steps.health.outputs.main_status != '200' || steps.health.outputs.health_status != '200'
      run: |
        echo "🚨 ALERT: Application health check failed!"
        echo "Main: ${{ steps.health.outputs.main_status }}"
        echo "Health: ${{ steps.health.outputs.health_status }}"
        echo "API: ${{ steps.health.outputs.api_status }}"
        
        # Here you can add notification logic:
        # - Send Slack notification
        # - Send email alert
        # - Create GitHub issue
        # - Call webhook
        
        exit 1

  performance-check:
    runs-on: ubuntu-latest
    name: ⚡ Performance Check
    if: github.event_name == 'workflow_dispatch'
    
    steps:
    - name: 📂 Checkout code
      uses: actions/checkout@v4

    - name: ⚡ Run Performance Tests
      run: |
        # Define base URL
        if [ "${{ github.event.inputs.environment || 'production' }}" == "production" ]; then
          BASE_URL="${{ secrets.PROD_BASE_URL || 'https://your-domain.com' }}"
        else
          BASE_URL="${{ secrets.STAGING_BASE_URL || 'https://staging.your-domain.com' }}"
        fi
        
        echo "⚡ Running performance tests on: $BASE_URL"
        
        # Test response time
        response_time=$(curl -s -o /dev/null -w "%{time_total}" "$BASE_URL")
        echo "Response time: ${response_time}s"
        
        # Test with load
        echo "🔄 Running load test..."
        for i in {1..10}; do
          curl -s -o /dev/null "$BASE_URL" &
        done
        wait
        
        echo "## ⚡ Performance Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Metric | Value |" >> $GITHUB_STEP_SUMMARY
        echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
        echo "| Response Time | ${response_time}s |" >> $GITHUB_STEP_SUMMARY
        echo "| Load Test | 10 concurrent requests completed |" >> $GITHUB_STEP_SUMMARY

  docker-image-scan:
    runs-on: ubuntu-latest
    name: 🔒 Security Scan
    if: github.event_name == 'workflow_dispatch'
    
    steps:
    - name: 🔑 Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: 🔒 Scan Docker Image
      run: |
        echo "🔒 Scanning Docker image for vulnerabilities..."
        
        # Pull latest image
        docker pull rofiq02bae/laravel-base-app:latest
        
        # Here you can add security scanning tools:
        # - Trivy
        # - Snyk
        # - Clair
        # - Docker Scout
        
        echo "✅ Security scan completed"
