name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  REGISTRY: docker.io
  IMAGE_NAME: rofiq02bae/laravel-base-app

jobs:
  test:
    runs-on: ubuntu-latest
    name: 🧪 Test Application
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: laravel_test
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
        ports:
          - 3306:3306
    
    steps:
    - name: 📂 Checkout code
      uses: actions/checkout@v4

    - name: 🐘 Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.3'
        extensions: mbstring, dom, fileinfo, mysql, zip, gd
        coverage: xdebug

    - name: 📦 Get Composer Cache Directory
      id: composer-cache
      run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

    - name: 🚀 Cache Composer dependencies
      uses: actions/cache@v3
      with:
        path: ${{ steps.composer-cache.outputs.dir }}
        key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
        restore-keys: ${{ runner.os }}-composer-

    - name: 📥 Install Dependencies
      working-directory: ./laravel12
      run: composer install --prefer-dist --no-progress --no-suggest --optimize-autoloader

    - name: 📋 Copy Environment File
      working-directory: ./laravel12
      run: cp .env.example .env

    - name: 🔑 Generate Application Key
      working-directory: ./laravel12
      run: php artisan key:generate

    - name: 🗄️ Configure Database
      working-directory: ./laravel12
      run: |
        sed -i 's/DB_CONNECTION=mysql/DB_CONNECTION=mysql/' .env
        sed -i 's/DB_HOST=database/DB_HOST=127.0.0.1/' .env
        sed -i 's/DB_PORT=3306/DB_PORT=3306/' .env
        sed -i 's/DB_DATABASE=laravel/DB_DATABASE=laravel_test/' .env
        sed -i 's/DB_USERNAME=laravel123/DB_USERNAME=root/' .env
        sed -i 's/DB_PASSWORD=laravel123/DB_PASSWORD=root/' .env

    - name: 🚀 Run Database Migrations
      working-directory: ./laravel12
      run: php artisan migrate --force

    - name: 🧪 Execute Tests
      working-directory: ./laravel12
      run: |
        vendor/bin/phpunit --coverage-text --coverage-clover=coverage.clover
        
    - name: 📊 Upload Coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./laravel12/coverage.clover
        flags: unittests
        name: codecov-umbrella

  security-scan:
    runs-on: ubuntu-latest
    name: 🔒 Security Scan
    needs: test
    
    steps:
    - name: 📂 Checkout code
      uses: actions/checkout@v4

    - name: 🐘 Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.3'
        extensions: mbstring, dom, fileinfo, mysql

    - name: 📥 Install Dependencies
      working-directory: ./laravel12
      run: composer install --prefer-dist --no-progress

    - name: 🔍 Run Security Audit
      working-directory: ./laravel12
      run: composer audit

  build-and-push:
    runs-on: ubuntu-latest
    name: 🐳 Build & Push Docker Image
    needs: [test, security-scan]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: 📂 Checkout code
      uses: actions/checkout@v4

    - name: 🔧 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🔑 Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: 📝 Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: 🏗️ Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./laravel12
        file: ./laravel12/app.dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  deploy-staging:
    runs-on: ubuntu-latest
    name: 🚀 Deploy to Staging
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
    - name: 📂 Checkout code
      uses: actions/checkout@v4
      
    - name: 🚀 Deploy to Staging
      run: |
        echo "🚀 Deploying to staging environment..."
        echo "Image: ${{ env.IMAGE_NAME }}:latest"
        # Add your staging deployment commands here
        # Example: kubectl, docker-compose, or other deployment tools

  deploy-production:
    runs-on: ubuntu-latest
    name: 🏭 Deploy to Production
    needs: build-and-push
    if: github.event_name == 'release'
    environment: production
    
    steps:
    - name: 📂 Checkout code
      uses: actions/checkout@v4
      
    - name: 🏭 Deploy to Production
      run: |
        echo "🏭 Deploying to production environment..."
        echo "Image: ${{ env.IMAGE_NAME }}:${{ github.event.release.tag_name }}"
        # Add your production deployment commands here

  notify:
    runs-on: ubuntu-latest
    name: 📢 Notify Status
    needs: [test, security-scan, build-and-push]
    if: always()
    
    steps:
    - name: 📢 Notify Success
      if: needs.test.result == 'success' && needs.security-scan.result == 'success' && needs.build-and-push.result == 'success'
      run: |
        echo "✅ All jobs completed successfully!"
        echo "🐳 Docker image pushed: ${{ env.IMAGE_NAME }}:latest"
        
    - name: 📢 Notify Failure
      if: needs.test.result == 'failure' || needs.security-scan.result == 'failure' || needs.build-and-push.result == 'failure'
      run: |
        echo "❌ One or more jobs failed!"
        echo "Test: ${{ needs.test.result }}"
        echo "Security: ${{ needs.security-scan.result }}"
        echo "Build: ${{ needs.build-and-push.result }}"
